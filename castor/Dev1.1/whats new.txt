================================
   Whats new in Castor 1.1 
================================

Enhancements to lref:
---------------------
- A new constructor lref(T*,bool) and a method set_ptr(T*,bool) allow lrefs to reference existing objects 
    via pointers. If bool argument is false, object's lifetime will not be managed.
- lref::operator=(rhs) will reset the lref if rhs is not initialized
- lref::bound(lref& rhs) will check if 'this' lref and rhs are bound/joined together

// - Relations supporting Fast && : False, Boolean, predicate, predicate_mf, predicate_mem, defined, undefined, negate


Enhancements to ILE (closure/lambda facility):
----------------------------------------------
- New named ILEs have been provided:
    + at - Allows indexed access. Equivalent to the operator [].
        E.g.   lref<string> str=..; cout << at(str,0)();
    + call - To invoke a function/function object with upto 6 arguments.
        E.g.   eq_f(x, call(&foo,1,2,3); eq_f(3, call(plus<int,int>(),1,2) )
    + create - To create an new object. Equivalent to operator new. Supercedes Create::with().
        E.g.   create<int>(1); create<pair<int,int> >(1,2);  create<string,const char*>("castor");
    + get - To access a data member of an object.
        E.g.   lref<pair<int,int> > pr .. ; write_f( get(pr,&pair:;first) )
    + mcall - To invoke a member function with upto 6 arguments.
        E.g.   lref<string> str= "hello" ;  predicate( mcall(str, &string::at,0)=='h' )
    + ref - References an object. Referenced object's lifetime must extend beyond the life of this ILE.
        E.g.   lref<int> s="hello";  eval( ref(cout) << s );
- ILE expressions now support use of "string literals".
    E.g. - lref<string> ls="castor"; predicate(ls=="castor");
         - eval(ref(cout) << "hello" << " world" )();  // cout << "hello" << "world";
         - string s; eval(ref(cin) >> ref(s) )();      // cin >> s;
         - stringstream strm; 
           eval(ref<ostream>(strm) << "hello")();   // return type of operator << is ostream& and not stringstream&
         - eval(ref<istream>(strm)) >> ref(s))();   // return type of operator >> is istream& and not stringstream&

- Speed improvements for ILE expressions. Fairly close to the speed of custom function objects.

New features:
-------------
- Class Coroutine and macros co_begin, co_end, co_return & co_yield that support coroutine style programming
  Helpful for defining relations imperatively.
- New overloads for the following relations that take function pointer or member function pointer as
  argument. These overloads allow passing an *overloaded* function (or method) to these
  relations without requiring explicit overload disambiguation. Also arguments to be forwarded can be 
  POTs or lrefs :
  + Additional overloads for eq_f, eq_mf, predicate_f & predicate_mf.
  + Signatures for eq_f and predicate_f modified (new signatures continue to be backward compatible).
  + Additional constructor for relation True that takes an integral argument denoting how many times to succeed.

- New relations: 
  + eq_mem() - for unifying with (non static) data members.
  + eval() and eval_mf() - To execute a function or member function. Return value (if any) is discarded.
  + error() - To throw an exception. 
  + pause() - To pause execution. Prints a message and waits for a key press by calling cin.ignore(). Helpful as a debugging aid.
  + pause_f() - Similar to pause(), but prints result of a function call instead of a string message.
  + permute() -  To generate permutations of a sequnce/string.
  + range_dec() - To iterate over a range in decreasing order.
  + ritem() -  To generate values from a sequence in reverse. The sequence must provide rbegin() and rend().
  + shuffle() - To generate a randomized sequence/string.
  + unique_mem(), unique_mf() - Similar to unique() but filtering is based on a data member or value returned by a method call.
  + writeAll(), writeAllTo() : To print all elements in a sequence to cout or to a stream.
  + write_mem(), writeTo_mem() : To print value of a data member to cout or a stream.
  + zip() : Takes two relations as argument and evaluates them in an interleaved manner until one of them fails.

- New Relations for use with operator >>= : 
   + count() - For counting the number of items in a sequence. E.g. range(i,1,10) >>= count(n)
   + order() - For producing a sorted sequence of objects.
   + order_mem() - For producing a sorted sequence of objects. Sort objects on a data member.
   + order_mf() - For producing a sorted sequence of objects. Sort based on value method call.
   + reverse() - For reversing a sequence of objects. E.g. range(i,1,10) >>= reverse(i)
   + reduce() - For reducing a sequence to a value by applying a operator(similar to accumulate). 
       E.g.:  range(j,1,10) >>= reduce(j, std::multiplies<int>()); // product of first 10 numbers
   + sum() - For summing the values in a sequence. E.g. range(i,1,10) >>= sum(i)
   + group_by() - For grouping objects based on some criteria. Allows nested grouping. e.g
        E.g: 
        // Group strings by first char & then by length
        
        char firstChar(const string& s) { return s[0]; };
        size_t str_len(const string& s) { return s.size(); };
        
        lref<string> n;
        lref<vector<string> > names ;
        lref<group<char,group<size_t,string> > > g;
        relation r = item(n,names) >>= group_by(n, &firstChar, g).then(&str_len);
        while(r()) {
           cout << "\n" << g->key;
           lref<group<size_t,string> > g2;
           relation subgroups = item(g2,g);
           while(subgroups()) {
                cout << "\n   " << g2->key << " : ";
                lref<string> s;
                relation values = item(s,g2);
                while(values()) cout << *s << " ";
           }
        }


Deprecated:
-----------
In order to use the following deprecated facilites a #define CASTOR_ENABLE_DEPRECATED is required.
- The Named ILE Create::With() is now deprecated. Prefer using the named ILE create().
- OneSolution relation is now deprecated. Use class Coroutine instead.


Potential Incompatibilites:
---------------------------
- item() relation now yields an lref<> that references the actual element in the container/sequence 
  instead of a copy.
- item() will now succeed once for every occurance of the value in the container/sequence. Old behavior
  of item was to succeed only once for such cases.

Bug fixes:
----------
- head_n and tail_n now fails instead of throwing exception if n>seq_.size()
- UnifyL  ... had a const member relation preventing copy construction
- Data member Read_r<T>::in is now a pointer instead of a reference to allow assignment of Read_r.
- Added #include<cstring.h> in eq.h  (Thanks to David Côme)
- Added #include<algorithm> in refcountedptr.h
- Exception types InvalidDeref and Underflow moved to namespace castor.
- Fixes for Gcc related warnings. (Thanks to Ali Cehreli)